class Solution {
    public int[] twoSum(int[] nums, int target) {
        //create map to put int[] nums in
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        //loop through nums
        for (int i = 0; i < nums.length; i++) {
            //find the comparison that needs nums+comp=target
            int comp = target - nums[i];

            //if it has the comp that nums need to reach target, return 
            if (map.containsKey(comp)) {
                return new int[] {map.get(comp), i};//recall {} is array dimension 
            }
            //if not, add to map
            map.put(nums[i], i);
        }
        return null;
    }
}

/*/
brute force method
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //double for loop to go through each index
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                //find the comparison that needs nums+comp=target
                int comp = target - nums[i];
                if (nums[j] == comp && i != j)
                    return new int[] {i, j};
            }
        }
        return null;
    }
}
*/
