/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if (root == null) return subRoot == null;
        //check if root, right, and left are subtrees
        else {
            return isSameTree(root, subRoot) || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
        }
    }
    
    public boolean isSameTree(TreeNode p, TreeNode q) {
        //if they are both null, true
        if (p == null && q == null) return true;
        //if either is null, false
        if (p == null || q == null) return false;  
        //if values do not match, false
        if (p.val != q.val) return false;
        //return true if they are the same
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
     }
}
