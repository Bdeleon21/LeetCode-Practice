/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        //if either list is null, return the other
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        
        //create a temp list to merge
        ListNode node = new ListNode(0);
        ListNode cur = node;
        //whileboth not null
        while(list1 != null && list2 != null) {
            //if val in 1 is less, put into temp
            if (list1.val < list2.val) {
                cur.next = list1;
                list1 = list1.next;
            }
            //else, put val from 2 into temp
            else {
                cur.next = list2;
                list2 = list2.next;
            }
            
            //move to next
            cur = cur.next;
        }
        
        //case where one lsit ends and other has not
        if (list1 != null) {
            cur.next = list1;
            list1 = list1.next;
        }
        
        if (list2 != null) {
            cur.next = list2;
            list2 = list2.next;
        }
        return node.next;
    }
}
